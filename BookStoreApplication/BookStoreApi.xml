<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BookStoreApi</name>
    </assembly>
    <members>
        <member name="M:BookStoreApi.Code.FileSystemImageService.SetImage(System.String,System.Threading.CancellationToken,System.String)">
            <summary>
            This method can decrease image quality, so call it only when image is 
            </summary>
            <param name="base64Content"></param>
            <param name="cancellationToken">Cancellation token to cancel the operation</param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:BookStoreApi.Contracts.IImageService.SetImage(System.String,System.Threading.CancellationToken,System.String)">
            <summary>
            Saves image to configured location and returns its id to save
            This method can decrease image quality, so call it only when image was changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:BookStoreApi.Contracts.IImageService.GetImage(System.String)">
            <summary>
            Gets image as base64 string
            </summary>
            <param name="identifier">Id of image</param>
            <returns>Content of image as base64 string</returns>
        </member>
        <member name="T:BookStoreApi.Controllers.AuthorsController">
            <summary>
            Endpoint used to interact with authors in the Book store database.
            </summary>
        </member>
        <member name="M:BookStoreApi.Controllers.AuthorsController.GetAuthors">
            <summary>
            Gets all authors from database
            </summary>
            <returns></returns>
        </member>
        <member name="M:BookStoreApi.Controllers.AuthorsController.GetAuthor(System.Int32)">
            <summary>
            Return the author by his Id
            </summary>
            <param name="id">Id of the author</param>
            <returns>Author data, if found</returns>
        </member>
        <member name="M:BookStoreApi.Controllers.AuthorsController.Create(BookStoreApi.Data.DTOs.AuthorUpsertDTO)">
            <summary>
            Create author
            </summary>
            <param name="author">Author data</param>
            <returns>New author if succeed; otherwise - message what went wrong</returns>
        </member>
        <member name="M:BookStoreApi.Controllers.AuthorsController.Update(System.Int32,BookStoreApi.Data.DTOs.AuthorUpsertDTO)">
            <summary>
            Updates author data in the database
            </summary>
            <param name="authorId">Author id</param>
            <param name="author">Author </param>
            <returns></returns>
        </member>
        <member name="M:BookStoreApi.Controllers.BooksController.Create(BookStoreApi.Data.DTOs.BookUpsertDTO)">
            <summary>
            Creates book in books database
            </summary>
            <param name="book">New book object</param>
            <returns></returns>
        </member>
        <member name="M:BookStoreApi.Controllers.BooksController.GetBooks">
            <summary>
            Gets list of books in the database
            </summary>
            <returns>All books</returns>
        </member>
        <member name="M:BookStoreApi.Controllers.BooksController.GetBook(System.Int32)">
            <summary>
            Get book by its id
            </summary>
            <param name="id">Book Id</param>
            <returns>Book, if found</returns>
        </member>
        <member name="M:BookStoreApi.Controllers.BooksController.Update(System.Int32,BookStoreApi.Data.DTOs.BookUpsertDTO)">
            <summary>
            Updating book in database
            </summary>
            <param name="bookId">Id of book to update</param>
            <param name="book">Updated book object</param>
            <returns>Updated book</returns>
        </member>
        <member name="M:BookStoreApi.Controllers.HomeController.Post(System.String)">
            <summary>
            Tesp method to authorize only customer
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BookStoreApi.Controllers.UsersController.Login(BookStoreApi.Data.DTOs.UserLoginDTO)">
            <summary>
            User login endpoint
            </summary>
            <param name="userLogin"></param>
            <returns></returns>
        </member>
        <member name="P:BookStoreApi.Data.DTOs.AuthorDTO.Id">
            <summary>
            Author id
            </summary>
        </member>
        <member name="T:BookStoreApi.Data.DTOs.AuthorUpsertDTO">
            <summary>
            Manages author update or insert operations
            </summary>
        </member>
        <member name="P:BookStoreApi.Data.DTOs.AuthorUpsertDTO.Id">
            <summary>
            AuthorId
            </summary>
        </member>
        <member name="P:BookStoreApi.Data.DTOs.AuthorUpsertDTO.Firstname">
            <summary>
            Firts name of the author
            </summary>
        </member>
        <member name="P:BookStoreApi.Data.DTOs.AuthorUpsertDTO.Lastname">
            <summary>
            Last name of the author
            </summary>
        </member>
        <member name="P:BookStoreApi.Data.DTOs.AuthorUpsertDTO.Bio">
            <summary>
            Biography of the author
            </summary>
        </member>
        <member name="P:BookStoreApi.Data.DTOs.AuthorUpsertDTO.Books">
            <summary>
            List of the books of the author
            </summary>
        </member>
    </members>
</doc>
