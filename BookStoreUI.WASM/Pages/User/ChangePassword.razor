@page "/ChangePassword"
@using Data.Models;
@using Microsoft.Extensions.Localization;

@inject IAuthentificationRepository _AuthRepository;
@inject NavigationManager _NavManager;
@inject IStringLocalizer<AuthentificationRepository> localizer;

<EditForm Model="Model" OnValidSubmit="ChangeUserPassword">
    <div class="card-body">

        <h3 class="card-header">Change password</h3>
        @if (Responce?.Succeed == true)
        {
            <Succeed AutoReturnDelay="@TimeSpan.FromSeconds(2)" AutoReturnUrl="/" Title="@Responce.Message" ShowReturnButton="true" />
        }
        else if (Responce?.Succeed == true)
        {
            <Fail Title="@Responce.Message" />
        }
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="currentPassword">@localizer["Current password"]</label>
            <InputText type="password" Id="currentPassword" @bind-Value="@Model.CurrentPassword" class="form-control" />
            <ValidationMessage For="@(()=>Model.CurrentPassword)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="newPassword">@localizer["New password"]</label>
            <InputText type="password" Id="newPassword" @bind-Value="@Model.NewPassword" class="form-control" />
            <ValidationMessage For="@(()=>Model.NewPassword)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="newPasswordConfirm">@localizer["Confirm new password"]</label>
            <InputText type="password" Id="newPasswordConfirm" @bind-Value="@Model.NewPasswordConfirm" class="form-control" />
            <ValidationMessage For="@(()=>Model.NewPasswordConfirm)"></ValidationMessage>
        </div>

    </div>
    <div class="card-footer">
        <button type="submit" class="btn btn-primary btn-block">@localizer["Change password"]</button>
    </div>
</EditForm>


@code {

    public ChangePasswordDTO Model { get; set; }

    public RepositoryResponce Responce = null;

    protected override void OnInitialized()
    {
        Model = new ChangePasswordDTO();
    }

    private async Task ChangeUserPassword()
    {
        Responce = await _AuthRepository.ChangePassword(Model);
    }

}
